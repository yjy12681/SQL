SELECT * FROM AUTH;
SELECT * FROM INFO;

--INNER JOIN (붙을 수 있는 데이터가 없으면 안나옴)
SELECT * FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;

SELECT ID, TITLE, INFO.AUTH_ID, NAME
FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;

-- 테이블 엘리어스
SELECT I.ID, I.TITLE, I.AUTH_ID, A.NAME
FROM INFO I
INNER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

--조건 WHERE
SELECT *
FROM INFO I 
INNER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID
WHERE ID IN(1,2,3)
ORDER BY ID DESC;

--INNER JOIN USING
SELECT *
FROM INFO
INNER JOIN AUTH
USING (AUTH_ID);

------------------------------------------
--OUTER JOIN
--LEFT OUTER JOIN
SELECT *
FROM INFO I
LEFT OUTER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

SELECT *
FROM INFO I
RIGHT OUTER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

SELECT *
FROM INFO A
LEFT OUTER JOIN AUTH I
ON A.AUTH_ID = I.AUTH_ID;

SELECT *
FROM INFO I
FULL OUTER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

--CROSS JOIN  -잘못된 조인의 형태
SELECT *
FROM INFO I
CROSS JOIN AUTH A;

SELECT * FROM EMPLOYEES CROSS JOIN DEPARTMENTS;

----------------------------------------------------------------------
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT *
FROM EMPLOYEES E
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--조인은 여러번 들어 갈 수 있습니다.
SELECT *
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT OUTER JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;

--SELF JOIN
SELECT E1.*,E2.FIRST_NAME AS 상급자
FROM EMPLOYEES E1
LEFT JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;
